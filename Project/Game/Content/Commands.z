//Author Brandon Wolenetz

class Commands {
    
    /*Check For Commands*/
    [Static]
    function CheckForCommands (str : String) {
        
        var cmd = Commands.ParseCommand(str);
        var vals = Commands.ParseValue(str);
        
        if(cmd == "/debug")
            Commands.Debug(vals);
        else if(cmd == "/pathdebug")
            Commands.PathDebug(vals);
        else if(cmd == "/give")
            Commands.GiveItem(vals);
        else
            Commands.Invalad(vals, cmd);
        
    }
    
    /*Commands*/
    
    [Static]
    function Debug (vals : Array[String]) {
        GlobalVariables.DebugLinesActive = !GlobalVariables.DebugLinesActive;
        if(GlobalVariables.DebugLinesActive)
            Utilities.ConsoleSend("Debug Mode ON", Real4(1, 0, 0, 1));
        else
            Utilities.ConsoleSend("Debug Mode OFF", Real4(1, 0, 0, 1));
    }
    
    [Static]
    function PathDebug (vals : Array[String]) {
        GlobalVariables.DebugNavNodes = !GlobalVariables.DebugNavNodes;
    }
    
    [Static]
    function GiveItem (vals : Array[String]) {
        if(vals.Count == 0) {
            Utilities.ConsoleSend("INVALID PARAMETERS, correct perameters are:\n/give [ITEM ID] [AMMOUNT](Optional)", Real4(1, 1, 0, 1));
            return;
        }
        var item = Utilities.ItemFromID(vals[0]);
        if(item == null) {
            Utilities.ConsoleSend("INVALID ITEM ID: `vals[0]`", Real4(1, 1, 0, 1));
            return;
        }
        
        item.Init();
        
        if(item.Stackable && vals.Count > 1) {
            var int = Integer.Parse(vals[1]);
            if(int != 0)
                item.Ammount = int;
            else
                item.Ammount = 1;
        } else if(item.Stackable) {
            item.Ammount = 1;
        }
        
        Utilities.ConsoleSend("`vals[0]` Given", Real4(1, 0, 0, 1));
        
        GlobalVariables.AddInventoryItem(item);
        
    }
    
    [Static]
    function Invalad (vals : Array[String], cmd : String) {
        Utilities.ConsoleSend("ERROR: No Sutch  Command: `cmd`", Real4(1, 1, 0, 1));
    }
    
    
    /*Parsing*/
    [Static]
    function ParseCommand (str : String) : String {
        var cmd = "";
        for (var i = 0; i < str.Count; ++i) {
            if(String.FromChar(str[i]) == " ") {
                Console.WriteLine("hello");
                cmd = str.SubStringFromRuneIndices(0, i);
                return cmd;
            }
        }
        return str;
    }
    
    [Static]
    function ParseValue (str : String) : Array[String] {
        var vals = Array[String]();
        var valsStr = "";
        for (var i = 0; i < str.Count; ++i) {
            if(String.FromChar(str[i]) == " ") {
                if(str.Count >= i+1) {
                    valsStr = str.SubStringFromRuneIndices(i+1, str.Count);
                    break;
                }else
                    return null;
            }
        }
        if(valsStr == "")
            return null;
        var last = 0;
        for (var i = 0; i < valsStr.Count; ++i) {
            if(String.FromChar(valsStr[i]) == " ") {
                vals.Add(valsStr.SubStringFromRuneIndices(last, i));
                last = i+1;
            } else if (i == valsStr.Count-1)
                vals.Add(valsStr.SubStringFromRuneIndices(last, i+1));
        }
        return vals;
    }
    
    
}
