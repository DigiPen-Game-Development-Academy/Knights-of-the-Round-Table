class ConsoleTypeBox : ZilchComponent {
    
    var CurrentIn : String = "";
    
    var LastIn : String = "";
    
    var History : Array[String];
    
    var Selected : Boolean = false;
    
    var Active : Boolean = false;
    
    var Text : Cog = null;
    
    [Dependency]
    var Reactive : Reactive;
    
    var HistoryIndex : Integer = -1;
    
    var InitialPos : Real3;
    
    var ACIndex : Integer = -1;
    
    function Initialize(init : CogInitializer) {
        Utilities.IDInit();
        Commands.Init();
        this.InitialPos = this.Owner.Parent.Transform.Translation;
        this.History = Array[String]();
        this.History.Add("");
        this.Text = this.Owner.FindChildByName("Text");
        this.Text.SpriteText.Color = Real4(1,1,1,1);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.TextTyped, this.OnTextTyped);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
        Zero.Connect(this.Owner, Events.MouseDown, this.OnMouseDown);
    }

    function OnMouseDown(event : ViewportMouseEvent) {
        this.Selected = true;
    }

    function OnKeyDown(event : KeyboardEvent) {
        if(!this.Selected && event.Key == Keys.Slash)
            this.Selected = true;
        if(!this.Selected || !this.Active)
            return;
        if(event.Key == Keys.Back) {
            if(this.CurrentIn.Count > 0) {
                this.CurrentIn = this.CurrentIn.SubStringFromRuneIndices(0, this.CurrentIn.Count-1);
                this.LastIn = this.CurrentIn;
                this.ACIndex = -1;
            }
        } else if(event.Key == Keys.Enter) {
            if(this.CurrentIn.Count != 0 && String.FromChar(this.CurrentIn.Get(0)) == "/") {
                Commands.CheckForCommands(this.CurrentIn);
                if(this.History[0] != this.CurrentIn)
                    this.History.Insert(0, this.CurrentIn);
            }else
                Utilities.ConsoleSend(this.CurrentIn, Real4(1,1,1,1));
            this.CurrentIn = "";
            this.LastIn = "";
            this.Selected = false;
            this.HistoryIndex = -1;
            this.ACIndex = -1;
        } else if(event.Key == Keys.Up) {
            ++this.HistoryIndex;
            
            if(this.HistoryIndex > this.History.Count-1)
                this.HistoryIndex = this.History.Count-1;
            
            this.CurrentIn = this.History[this.HistoryIndex];
            
        } else if(event.Key == Keys.Down) {
            
            --this.HistoryIndex;
            
            if(this.HistoryIndex < 0)
                this.HistoryIndex = 0;
            
            this.CurrentIn = this.History[this.HistoryIndex];
        } else if(Zero.Keyboard.KeyIsDown(Keys.Shift) && event.Key == Keys.Tab) {
            var ac = this.GetAC(this.LastIn);
            if(ac.Count == 0)
                return;
            if(this.ACIndex == -1) {
                var str = "";
                foreach(var cmd in ac) {
                    str = "`str`, `cmd`";
                }
                Utilities.ConsoleSend("Auto-Complete: `str`", Real4(0,1,0,1));
            }
            --this.ACIndex;
            if(this.ACIndex < 0)
                this.ACIndex = ac.Count-1;
            this.CurrentIn = ac[this.ACIndex];
            
        } else if(event.Key == Keys.Tab) {
            var ac = this.GetAC(this.LastIn);
            if(ac.Count == 0)
                return;
            if(this.ACIndex == -1) {
                var str = "`ac[0]`";
                for(var i = 1; i < ac.Count; ++i) {
                    str = "`str`, `ac[i]`";
                }
                Utilities.ConsoleSend("Auto-Complete: `str`", Real4(0,1,0,1));
            }
            ++this.ACIndex;
            if(this.ACIndex > ac.Count-1)
                this.ACIndex = 0;
            this.CurrentIn = ac[this.ACIndex];
            
        }
    }

    function OnTextTyped(event : KeyboardTextEvent) {
        
        if(this.Selected && this.Active){
            var key = String.FromChar(event.Character);
            if(this.IsRenderable(event.Character) && this.Text.SpriteText.MeasureGivenText(":>`this.CurrentIn``key`").X <= (this.Owner.Area.Size.X - 0.125)) {
                this.CurrentIn = "`this.CurrentIn``key`";
                this.LastIn = this.CurrentIn;
                this.ACIndex = -1;
            }
        }
    }

    function OnLogicUpdate(event : UpdateEvent) {
        
        if(Zero.Keyboard.KeyIsPressed(GlobalVariables.InputManager.OpenConsole) && !this.Selected)
            this.Active = !this.Active;
        this.Owner.Sprite.Visible = this.Active;
        
        if(this.Active) {
            this.Owner.Parent.Transform.Translation = this.InitialPos;
        } else {
            this.Owner.Parent.Transform.Translation = this.InitialPos - Real3(0,this.Owner.Area.Size.Y,0);
        }
        
        this.Text.SpriteText.Visible = this.Active;
        this.Text.SpriteText.Text = ":>`this.CurrentIn`";
        
        if(this.Selected && this.Active) {
            this.Owner.Sprite.Color = Real4(this.Owner.Sprite.Color.X, this.Owner.Sprite.Color.Y, this.Owner.Sprite.Color.Z, 0.95);
            GlobalVariables.PauseMenu.MenuVisibilityController.Vis = true;
            GlobalVariables.GameSpace.TimeSpace.Paused = true;
        } else {
            this.Owner.Sprite.Color = Real4(this.Owner.Sprite.Color.X, this.Owner.Sprite.Color.Y, this.Owner.Sprite.Color.Z, 0.75);
        }
        
        if(!this.Active && this.Selected)
            this.Selected = false;
        
    }
    
    function IsRenderable(code : Integer) : Boolean {
        return code >= " "[0] && code <= "~"[0];
    }
    
    function GetAC(str : String) : Array[String] {
        
        var strs = Array[String]();
        
        if(str.StartsWith ("/give")) {
            
            foreach(var cmd in Utilities.Ids) {
                var nCmd = "/give `cmd.ID`";
                if(nCmd.StartsWith(str)) {
                    strs.Add(nCmd);
                }
            }
            
        } else {
            foreach(var cmd in Commands.Commands) {
                if(cmd.Cmd.StartsWith(str)) {
                    strs.Add(cmd.Cmd);
                }
            }
        }
        return strs;
    }
}
