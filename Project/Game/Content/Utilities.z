//Author Brandon Wolenetz

struct PointReturn {
    var Pos : Real3 = Real3(9999);
    var Target : Real3 = Real3(9999);
}

class Utilities
{
    [Static]
    function Raycast (start : Real3, direction : Real3, physSpace : PhysicsSpace, range : Real) : CastResult {
        
        var ray = Ray();
        ray.Start = start;
        ray.Direction = direction;
        var result = physSpace.CastRayFirst(ray);
        if(result.Distance > range){
            if(GlobalVariables.DebugLinesActive) Utilities.DrawdebugLine(start, start + (range * Math.Normalize(direction)), Real4(0, 0, 1, 1));
            return null;
        }
        
        if(GlobalVariables.DebugLinesActive) Utilities.DrawdebugLine(start, start + (result.Distance * Math.Normalize(direction)), Real4(0, 0, 1, 1));
        
        return result;
        
    }
    
    [Static]
    function Raycast (start : Real3, direction : Real3, physSpace : PhysicsSpace, range : Real, filter : CastFilter) : CastResult {
        
        var ray = Ray();
        ray.Start = start;
        ray.Direction = direction;
        var result = physSpace.CastRayFirstFiltered(ray, filter);
        if(result.Distance > range){
            if(GlobalVariables.DebugLinesActive) Utilities.DrawdebugLine(start, start + (range * Math.Normalize(direction)), Real4(0, 0, 1, 1));
            return null;
        }
        
        if(GlobalVariables.DebugLinesActive) Utilities.DrawdebugLine(start, start + (result.Distance * Math.Normalize(direction)), Real4(0, 0, 1, 1));
        
        return result;
        
    }
    
    [Static]
    function DrawCircle (pos : Real3, radius : Real, filled : Boolean, color : Real4) {
        
        var circle = DebugCircle();
        circle.Position(pos);
        circle.Radius(radius);
        circle.Float4Color(color);
        circle.Filled(filled);
        circle.ViewAligned(true);
        circle.Draw();
    }
    [Static]
    function DrawdebugLine(start : Real3, end :Real3){
        Utilities.DrawdebugLine(start, end, Real4(0,0,1,1));
    }
     [Static]
    function DrawdebugLine(start : Real2, end : Real2){
        Utilities.DrawdebugLine(Real3(start.X, start.Y, 0), Real3(end.X, end.Y, 0), Real4(0,0,1,1));
    }
     [Static]
    function DrawdebugLine(start : Real3, end : Real3, color :Real4){
        var debugLine = DebugLine();
        debugLine.Start(start);
        debugLine.End(end);
        debugLine.Float4Color(color);
        debugLine.Draw();
    }
     [Static]
    function DrawdebugLine(start : Real2, end : Real2, color :Real4){
        Utilities.DrawdebugLine(Real3(start.X, start.Y, 0), Real3(end.X, end.Y, 0), color);
        
    }
    
    
    [Static]
    function Damage(obj : Cog, damage : Real) {
        
        var dmg = Damage();
        
        dmg.Damage = damage;
        
        obj.DispatchEvent(Events.Damage, dmg);
        
    }
    
  
}
