class StealthBoss : ZilchComponent {
    
    [Dependency] var Stealth : Stealth;
    [Dependency] var AI : EnemyAI;
    
    [Property] var SneakCooldown : Real = 5;
    
    var MinDist : Real = 3;
    
    var Timer : Real = 0;
    
    var Rand : Random;
    
    var Active : Boolean = true;
    
    function Initialize(init : CogInitializer) {
        //set collision table so raycast goes through enemies
        if(this.Space.PhysicsSpace.CollisionTable != CollisionTable.CollisionTable) {
            this.Space.PhysicsSpace.CollisionTable = CollisionTable.CollisionTable;
        }
        
        this.Timer = this.SneakCooldown;
        
        this.Rand = Random();
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent) {
        
        this.Stealth.Active = this.Active;
        
        if(!this.Active)
            return;
        
        this.Timer -= event.Dt;
        
        if (this.Timer <= 0 && !this.InFlashlightRange(this.Owner.Transform.WorldTranslation) && Math.Distance(GlobalVariables.Player.Transform.WorldTranslation, this.Owner.Transform.WorldTranslation) >= this.MinDist) {
            this.Timer = this.SneakCooldown;
            this.Sneak();
        }
        
        this.AI.State = State.Spotted;
        
    }
    
    function InFlashlightRange (pos : Real3) : Boolean {
        var vec = pos - GlobalVariables.Player.Transform.WorldTranslation;
        var vec2 = this.LevelSettings.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0) - GlobalVariables.Player.Transform.WorldTranslation;
        
        var dot = Math.Dot(Math.Normalize(vec), Math.Normalize(vec2));
        
        var angle = Math.ACos(dot);
        
        var dist = Math.Distance(GlobalVariables.Player.Transform.WorldTranslation, pos);
        
        if(angle > Math.ToRadians(45) || dist > 10 || (dist > 2 && (GlobalVariables.UseWeapon.Utility == null || GlobalVariables.UseWeapon.Utility.ID != "Light"))) {
            
            return false;
            
        }
        return true;
    }
    
    function Sneak () {
        var filter = CastFilter();
        var vel = GlobalVariables.Player.RigidBody.Velocity;
        var ghost = GlobalVariables.Player.BoxCollider.Ghost;
        GlobalVariables.Player.BoxCollider.Ghost = false;
        GlobalVariables.Player.RigidBody.DynamicState = RigidBodyDynamicState.Static;
        filter.IgnoreDynamic = true;
        filter.IgnoreGhost = true;
        filter.CollisionGroup = CollisionGroup.Enemies;
        
        var pos = Real3(0);
        for (var i = 0; i < 50; ++i) {
            
            pos = this.Owner.Transform.WorldTranslation + Real3(this.Rand.Range(-this.Stealth.SneakRange, this.Stealth.SneakRange), this.Rand.Range(-this.Stealth.SneakRange, this.Stealth.SneakRange), 0);
            
            var res = Utilities.Raycast(pos, GlobalVariables.Player.Transform.WorldTranslation - pos, this.Space.PhysicsSpace, 50, filter);
            
            var node = this.LevelSettings.CreateNavGrid.GetNodeFromPos(pos);
            
            if(node != null && node.Walkable && (res == null || res.ObjectHit != GlobalVariables.Player || !this.InFlashlightRange(pos))) {
                
                this.Owner.Transform.WorldTranslation = pos;
                break;
                
            }
        }
        
        GlobalVariables.Player.RigidBody.DynamicState = RigidBodyDynamicState.Dynamic;
        GlobalVariables.Player.RigidBody.Velocity = vel;
        GlobalVariables.Player.BoxCollider.Ghost = ghost;
        
    }
    
}
